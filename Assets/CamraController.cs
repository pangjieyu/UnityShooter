using System.Collections; using System.Collections.Generic; using UnityEngine;  public class CamraController : MonoBehaviour {     public Transform target;//观察游戏对象     public int rotSpeed = 50;//鼠标旋转速度     public float distance = 3;//摄像机与观察目标的距离     public int disSpeed = 10;//拉远近的速度      private float moveX = 0;     private float moveY = 0;     private Vector3 lookCenter;//观测位置 	void Start () {         lookCenter = target.position + Vector3.up * 0.5f; 	}      void Update()     {         // 拖动摄像机围绕物体旋转         if (Input.GetMouseButton(0))         {             moveX += Input.GetAxis("Mouse X") * rotSpeed * Time.deltaTime;             moveY += Input.GetAxis("Mouse Y") * rotSpeed * Time.deltaTime;             Quaternion q = Quaternion.Euler(moveY, moveX, 0);             Vector3 direction = q * Vector3.forward;//将角度换算成向量             this.transform.position = lookCenter - direction * distance;//根据向量反向计算出位置             this.transform.LookAt(lookCenter);//测         }else if (Input.GetAxis("Mouse ScrollWheel") != 0)//滚动滚轮控制视图距离         {              this.transform.position += this.transform.forward * Input.GetAxis("Mouse ScrollWheel") * Time.deltaTime * disSpeed;             distance = Vector3.Distance(this.transform.position, lookCenter);         } else if(Input.GetMouseButton(2))//右键平移         {             lookCenter += (transform.InverseTransformDirection(transform.up) * Input.GetAxis("Mouse Y") + transform.InverseTransformDirection(transform.right) * Input.GetAxis("Mouse X")) * Time.deltaTime;             transform.Translate((transform.InverseTransformDirection(transform.up) * Input.GetAxis("Mouse Y") + transform.InverseTransformDirection(transform.right) * Input.GetAxis("Mouse X")) * Time.deltaTime);             distance = Vector3.Distance(this.transform.position, lookCenter);         }     } } 